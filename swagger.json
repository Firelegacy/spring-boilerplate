{
  "openapi": "3.0.1",
  "paths": {
    "/lending-servicing-requests": {
      "post": {
        "summary": "Submit a client request to create a servicing ticket for a digital sale in the lending domain",
        "description": "Submit a client request to create a servicing ticket for a digital sale in the lending domain",
        "operationId": "createLendingServicingRequest",
        "requestBody": {
          "description": "Request body that contains all the prospect/existing customer data collected through a sales flow that is needed to create a new servicing request in SNOW",
          "required": true,
          "content": {
            "application/json; charset=utf-8": {
              "schema": {
                "$ref": "#/components/schemas/ServicingRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/CreateServicingRequestResponse"
          },
          "400": {
            "$ref": "#/components/responses/400ErrorResponse"
          },
          "401": {
            "$ref": "#/components/responses/401ErrorResponse"
          },
          "403": {
            "$ref": "#/components/responses/403ErrorResponse"
          },
          "404": {
            "$ref": "#/components/responses/404ErrorResponse"
          },
          "405": {
            "$ref": "#/components/responses/405ErrorResponse"
          },
          "406": {
            "$ref": "#/components/responses/406ErrorResponse"
          },
          "408": {
            "$ref": "#/components/responses/408ErrorResponse"
          },
          "409": {
            "$ref": "#/components/responses/409ErrorResponse"
          },
          "429": {
            "$ref": "#/components/responses/429ErrorResponse"
          },
          "500": {
            "$ref": "#/components/responses/500ErrorResponse"
          },
          "503": {
            "$ref": "#/components/responses/503ErrorResponse"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ServicingRequest": {
        "description": "Data needed to create a new servicing request in SNOW",
        "type": "object",
        "properties": {
          "requestType": {
            "description": "The flow for which the request is created",
            "type": "string",
            "example": "DIRECT_RESERVE"
          },
          "productId": {
            "description": "The product for which the request is created",
            "type": "string",
            "example": "DR"
          },
          "language": {
            "description": "The code of the language",
            "type": "string",
            "enum": [
              "NL",
              "FR",
              "EN",
              "DE"
            ],
            "example": "EN"
          },
          "signatureType": {
            "description": "Wether the request is manually signed or electronically",
            "type": "string",
            "enum": [
              "MANUAL",
              "ELECTRONIC"
            ],
            "example": "MANUAL"
          },
          "occupationType": {
            "description": "The customer's current employment type",
            "type": "string",
            "enum": [
              "EMPLOYEE",
              "WORKER",
              "FREELANCE"
            ],
            "example": "EMPLOYEE"
          },
          "occupationSince": {
            "description": "Date since the customer is in current employment situation",
            "type": "string",
            "format": "date",
            "example": "03-01-2023"
          },
          "livingSituationType": {
            "description": "The customer's current living situation type",
            "type": "string",
            "enum": [
              "OWNER",
              "TENANT"
            ],
            "example": "OWNER"
          },
          "livingSituationSince": {
            "description": "Date since the customer is in current living situation",
            "type": "string",
            "format": "date",
            "example": "25-01-2023"
          },
          "dependentsNumber": {
            "description": "Number of dependents",
            "type": "integer",
            "minimum": 0,
            "maximum": 10
          },
          "domiciliatedIncome": {
            "description": "Is the customer's income domiciliated on a BNPPF account?",
            "type": "boolean"
          },
          "nettoIncomeAmount": {
            "description": "Monthly netto income",
            "type": "number",
            "format": "double",
            "example": "2856.7"
          },
          "otherNettoIncomeAmount": {
            "description": "Other monthly netto income",
            "type": "number",
            "format": "double",
            "example": "540.30"
          },
          "mortgageOrRentAmount": {
            "description": "Monthly mortgage or rent payment",
            "type": "number",
            "format": "double",
            "example": "1250.0"
          },
          "otherCreditsAmount": {
            "description": "Other monthly credit payments",
            "type": "number",
            "format": "double",
            "example": "0.0"
          },
          "otherExpensesAmount": {
            "description": "Other monthly expenses",
            "type": "number",
            "format": "double",
            "example": "250.5"
          },
          "totalCreditAmount": {
            "description": "Total amount remaining to pay for all credits",
            "type": "number",
            "format": "double",
            "example": "250900.2"
          },
          "civilStatusCode": {
            "$ref": "#/components/schemas/CivilStatusCode"
          },
          "marriageSettlementCode": {
            "$ref": "#/components/schemas/MarriageSettlementCode"
          },
          "accountNumber": {
            "description": "The customer's IBAN account number for which the request is created",
            "type": "string",
            "pattern": "^[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}$",
            "example": "BE49001816070271"
          },
          "consent": {
            "description": "Did the customer read the T&C of the product and accepted it?",
            "type": "boolean"
          },
          "customerContext": {
            "$ref": "#/components/schemas/CustomerContext"
          },
          "productContext": {
            "$ref": "#/components/schemas/ProductContext"
          },
          "callbackContext": {
            "$ref": "#/components/schemas/CallbackContext"
          }
        },
        "required": [
          "requestType",
          "productId",
          "language",
          "occupationType",
          "occupationSince",
          "livingSituationType",
          "livingSituationSince",
          "dependentsNumber",
          "domiciliatedIncome",
          "nettoIncomeAmount",
          "otherNettoIncomeAmount",
          "mortgageOrRentAmount",
          "otherCreditsAmount",
          "otherExpensesAmount",
          "totalCreditAmount",
          "civilStatusCode",
          "accountNumber",
          "consent",
          "customerContext",
          "productContext",
          "callbackContext"
        ]
      },
      "ServicingRequestResponse": {
        "description": "Response when creating a new lending servicing request",
        "type": "object",
        "properties": {
          "requestID": {
            "description": "The newly created servicing request ID",
            "type": "string",
            "example": "CFEC0001322"
          }
        }
      },
      "CustomerContext": {
        "description": "The customer data needed to create the request",
        "type": "object",
        "properties": {
          "genderCode": {
            "description": "Gender of the customer",
            "type": "string",
            "enum": [
              "M",
              "F",
              "V"
            ],
            "example": "M"
          },
          "firstName": {
            "description": "Firstname of the customer",
            "type": "string",
            "example": "Jean"
          },
          "lastName": {
            "description": "Lastname of the customer",
            "type": "string",
            "example": "Miller"
          },
          "birthDate": {
            "description": "Birthdate of the person",
            "type": "string",
            "format": "date",
            "example": "1990-09-10"
          },
          "civilStatusCode": {
            "$ref": "#/components/schemas/CivilStatusCode"
          },
          "nationalityCode": {
            "type": "string",
            "description": "The nationality of the customer",
            "pattern": "^[A-Za-z]{2}$",
            "example": "BE"
          },
          "streetName": {
            "description": "Customer's street address",
            "type": "string",
            "example": "Boulevard Lemmonier"
          },
          "streetNumber": {
            "description": "Customer's house number",
            "type": "string",
            "example": "C-101"
          },
          "mailBoxNumber": {
            "description": "Customer's box number",
            "type": "string",
            "example": "CB-3"
          },
          "postCodeId": {
            "type": "string",
            "description": "Postal code of the customer",
            "example": "1000"
          },
          "cityName": {
            "description": "City of residence of the customer",
            "type": "string",
            "example": "Brussels"
          },
          "countryCode": {
            "description": "Country of residence of the customer in ISO alpha-2.",
            "type": "string",
            "pattern": "^[A-Za-z]{2}$",
            "example": "BE"
          },
          "phone": {
            "$ref": "#/components/schemas/PhoneAddress"
          },
          "mobile": {
            "$ref": "#/components/schemas/PhoneAddress"
          },
          "emailUri": {
            "description": "Email address of the customer",
            "type": "string",
            "example": "miller.co@example.com"
          }
        }
      },
      "ProductContext": {
        "description": "The product data needed to create the request",
        "type": "object",
        "additionalProperties": {
          "description": "Dynamic fields depending on product request",
          "type": "string"
        }
      },
      "CallbackContext": {
        "description": "The callback data needed to create the request",
        "type": "object",
        "properties": {
          "callbackPhone": {
            "$ref": "#/components/schemas/PhoneAddress"
          },
          "callbackDate": {
            "description": "Date the customer should be called",
            "type": "string",
            "format": "date",
            "example": "03/01/2023"
          },
          "callbackTimeframe": {
            "description": "The timeframe during which the customer should be called back (1 = 9h-10h, 11 = 19h-20h)",
            "type": "number",
            "example": "2"
          }
        }
      },
      "CivilStatusCode": {
        "description": "The customer's current marital state",
        "type": "string",
        "enum": [
          "MARRIED",
          "DIVORCED",
          "SINGLE",
          "WIDOW"
        ],
        "example": "SINGLE"
      },
      "MarriageSettlementCode": {
        "description": "The customer's current marriage settlement code",
        "type": "string",
        "enum": [
          "LEGAL_SYSTEM",
          "SEPARATED_ESTATE",
          "UNIVERSAL_COMMUNITY"
        ],
        "example": "LEGAL_SYSTEM"
      },
      "PhoneAddress": {
        "description": "Phone number with the prefix and type",
        "type": "object",
        "properties": {
          "typeCode": {
            "description": "Type of phone number",
            "type": "string",
            "enum": [
              "PHONE",
              "FAX",
              "MOBILE"
            ],
            "example": "MOBILE"
          },
          "number": {
            "type": "string",
            "description": "Phone number with the prefix",
            "example": "+32466435810"
          }
        }
      },
      "ErrorMessage": {
        "description": "Generic error report structure",
        "type": "object",
        "required": [
          "code"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "External code of the error"
          },
          "message": {
            "type": "string",
            "description": "Human readable description of the reason of the error"
          },
          "additionalInformation": {
            "type": "object",
            "description": "Additional error information",
            "properties": {
              "appCode": {
                "type": "string",
                "description": "Application app code"
              },
              "severity": {
                "type": "string",
                "description": "Application error severity level"
              },
              "appErrorCode": {
                "type": "string",
                "description": "Application internal error code"
              },
              "appMessage": {
                "type": "string",
                "description": "Application error message for the developers"
              }
            }
          }
        }
      }
    },
    "responses": {
      "CreateServicingRequestResponse": {
        "description": "Servicing request successfully created",
        "content": {
          "application/json; charset=utf-8": {
            "schema": {
              "$ref": "#/components/schemas/ServicingRequestResponse"
            }
          }
        }
      },
      "400ErrorResponse": {
        "description": "Bad Request",
        "content": {
          "application/json; charset=utf-8": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        }
      },
      "401ErrorResponse": {
        "description": "Unauthorized",
        "content": {
          "application/json; charset=utf-8": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        }
      },
      "403ErrorResponse": {
        "description": "Forbidden",
        "content": {
          "application/json; charset=utf-8": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        }
      },
      "404ErrorResponse": {
        "description": "Not found",
        "content": {
          "application/json; charset=utf-8": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        }
      },
      "405ErrorResponse": {
        "description": "Method Not Allowed",
        "content": {
          "application/json; charset=utf-8": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        }
      },
      "406ErrorResponse": {
        "description": "Not Acceptable",
        "content": {
          "application/json; charset=utf-8": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        }
      },
      "408ErrorResponse": {
        "description": "Request Timeout",
        "content": {
          "application/json; charset=utf-8": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        }
      },
      "409ErrorResponse": {
        "description": "Conflict",
        "content": {
          "application/json; charset=utf-8": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        }
      },
      "429ErrorResponse": {
        "description": "Too Many Requests",
        "content": {
          "application/json; charset=utf-8": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        }
      },
      "500ErrorResponse": {
        "description": "Internal Server Error",
        "content": {
          "application/json; charset=utf-8": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        }
      },
      "503ErrorResponse": {
        "description": "Service unavailable",
        "content": {
          "application/json; charset=utf-8": {
            "schema": {
              "$ref": "#/components/schemas/ErrorMessage"
            }
          }
        }
      }
    }
  }
}
